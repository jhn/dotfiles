set nocompatible                " Don't tolerate vi behavior
set encoding=utf-8              " Use UTF-8

" Vundle as the plugin manager
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()

Bundle 'gmarik/Vundle.vim'
Bundle 'airblade/vim-gitgutter'
Bundle 'chriskempson/base16-vim'
Bundle 'ervandew/supertab'
Bundle 'godlygeek/tabular'
Bundle 'kien/ctrlp.vim'
Bundle 'tpope/vim-commentary'
Bundle 'tpope/vim-endwise'
Bundle 'tpope/vim-fugitive'
Bundle 'tpope/vim-surround'
Bundle 'vim-ruby/vim-ruby'
" Clojure
"Bundle 'tpope/vim-fireplace'
"Bundle 'guns/vim-clojure-static'

call vundle#end()               " required

" Appearance
let base16colorspace=256        " Hack for sane colors
colorscheme base16-tomorrow     " From http://chriskempson.github.io/base16/#tomorrow
set background=dark             " Required for Tomorrow
set guifont=Inconsolata:h16     " The best font at the best size
syntax on                       " Enables syntax highlighting
filetype plugin indent on       " Sane defaults

" gvim only options
if has("gui_running")
  Bundle 'bling/vim-airline'

  set guifont=Inconsolata\ for\ Powerline:h16
  let g:airline_theme = 'base16'
  let g:airline_powerline_fonts = 1
  let g:airline#extensions#hunks#enabled = 0
  let g:airline#extensions#whitespace#trailing_format = 'trail[%s]'
  let g:airline#extensions#whitespace#mixed_indent_format = 'mix[%s]'
endif

" General
set number                      " Line numbers are essential
set clipboard=unnamed           " Share system clipboard
set numberwidth=5               " Let the gutter breath
set ruler                       " Show the cursor position
set shell=bash                  " Avoids munging PATH under zsh
set cursorline                  " Highlight current line
set showcmd                     " Show partial commands below the status line
set history=10000               " Remember more Ex commands
set scrolloff=10                " Have some context around the current line
set wildmenu                    " Make tab completion for files/buffers act like bash
set laststatus=2                " Always show the statusline, for Powerline
set noswapfile                  " I don't like swapfiles
set diffopt=filler,iwhite       " In diff mode, ignore whitespace changes and align unchanged lines
let mapleader=","               " Map leader to the comma

" Buffers
set hidden                      " Allow backgrounding buffers without writing them
set autoread                    " Auto-reload buffers when file changed on disk

" Whitespace
set nowrap                      " Don't wrap lines
set tabstop=2                   " A tab is two spaces
set shiftwidth=2                " An autoindent (with <<) is two spaces
set expandtab                   " Replaces tabs with spaces
set backspace=indent,eol,start  " Backspace through everything in insert mode
set list                        " Show trailing whitespace
set listchars=tab:»·,trail:·    " Display a dot for spaces

" Searching
set hlsearch                    " Highlight matches
set incsearch                   " Incremental searching
set ignorecase                  " Searches are case insensitive...
set smartcase                   " ... unless they contain at least one capital letter
set showmatch                   " Show matching parenthesis

" Splits
set splitright                  " Open vertical buffer to the right
set splitbelow                  " Open horizontal buffer below

" Keybindings
  """""""""""""""""""""""""""""""""""""""""""""""""""

" For tabularize
vnoremap <leader>a :Tabularize<Space>//<Left>
" Makes Y more consistent with other capitals.
nnoremap Y y$
" Disable highlight when <leader>d is pressed
nnoremap <silent> <leader>d :noh<cr>
" Opens .vimrc in a new tab
nmap <leader>v :tabedit $MYVIMRC<CR>

" Easier navigation between splits
nnoremap <c-j> <c-w>j
nnoremap <c-k> <c-w>k
nnoremap <c-h> <c-w>h
nnoremap <c-l> <c-w>l

" Autocompletion for {, (, [, ", '
inoremap {      {}<Left>
inoremap {<CR>  {<CR>}<Esc>O
inoremap {{     {
inoremap {}     {}
inoremap <expr> }  strpart(getline('.'), col('.')-1, 1) == "}" ? "\<Right>" : "}"

inoremap (      ()<Left>
inoremap (<CR>  (<CR>)<Esc>O
inoremap ((     (
inoremap ()     ()
inoremap <expr> )  strpart(getline('.'), col('.')-1, 1) == ")" ? "\<Right>" : ")"

inoremap [      []<Left>
inoremap [<CR>  [<CR>]<Esc>O
inoremap [[     [
inoremap []     []
inoremap <expr> ]  strpart(getline('.'), col('.')-1, 1) == "]" ? "\<Right>" : "]"

inoremap "      ""<Left>
inoremap ""     ""
inoremap '      ''<Left>
inoremap ''     ''

" Faster command mode
nnoremap ;      :
nnoremap :      ;

" Language-specific
  """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Associate files correctly
au BufRead,BufNewFile *.{md,mdown,mkd,mkdn,mdwn} set ft=markdown
au BufRead,BufNewFile *Makefile*,*makefile*      set ft=make

" Overrides for languages
au FileType cpp,c,h  set sw=4 sts=4 ts=4 nolist
au FileType make     set ts=4 sts=4 sw=4 nolist noexpandtab
au FileType markdown set ts=4 sts=4 sw=4 nolist spell textwidth=80

au FileType cpp  map <leader>c :!clear <CR> :!g++ -Wall "%:p" -o "%:p:r" && "%:p:r"<CR>
au FileType c    map <leader>c :!clear <CR> :!gcc -Wall -g -O0 "%:p" -o "%:p:r" && "%:p:r"<CR>
au FileType ruby map <leader>c :!clear <CR> :!ruby % <CR>

" Handy functions
  """""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

" Return to last edit position when opening files
autocmd BufReadPost *
     \ if line("'\"") > 0 && line("'\"") <= line("$") |
     \   exe "normal! g`\"" |
     \ endif

" From https://github.com/garybernhardt/dotfiles
" Indent if we're at the beginning of a line. Else, do completion.
function! InsertTabWrapper()
    let col = col('.') - 1
    if !col || getline('.')[col - 1] !~ '\k'
        return "\<tab>"
    else
        return "\<c-p>"
    endif
endfunction

" Make use of the function defined above
inoremap <tab> <c-r>=InsertTabWrapper()<cr>
inoremap <s-tab> <c-n>

" From https://github.com/thoughtbot/dotfiles
" Use The Silver Searcher https://github.com/ggreer/the_silver_searcher
if executable('ag')
  " Use ag in CtrlP for listing files. Lightning fast and respects .gitignore
  let g:ctrlp_user_command = 'ag %s -l --nocolor -g ""'

  " ag is fast enough that CtrlP doesn't need to cache
  let g:ctrlp_use_caching = 0
endif
